---
import Layout from '../../layouts/Layout.astro';
import { getBlogPosts } from '../../lib/blog';
import { format } from 'date-fns';

const posts = await getBlogPosts();
---

<Layout title="Blog Admin | Your Portfolio">
  <div class="min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 py-20">
    <div class="container mx-auto px-4">
      <div class="flex justify-between items-center mb-8">
        <h1 class="text-4xl font-bold bg-gradient-to-r from-purple-400 to-pink-600 text-transparent bg-clip-text">
          Blog Admin
        </h1>
        <button
          id="new-post"
          class="px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
        >
          New Post
        </button>
      </div>

      <div class="bg-slate-800/50 backdrop-blur-sm rounded-xl overflow-hidden">
        <table class="w-full">
          <thead>
            <tr class="border-b border-slate-700/50">
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Title</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Status</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Published</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="divide-y divide-slate-700/50">
            {posts.map(post => (
              <tr class="hover:bg-slate-700/20">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-white">{post.title}</div>
                  <div class="text-sm text-gray-400">{post.slug}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`px-2 py-1 text-xs rounded-full ${
                    post.status === 'published' 
                      ? 'bg-green-500/20 text-green-400' 
                      : 'bg-yellow-500/20 text-yellow-400'
                  }`}>
                    {post.status}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-400">
                  {format(new Date(post.published_at), 'MMM d, yyyy')}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm">
                  <button
                    class="text-purple-400 hover:text-purple-300 transition-colors mr-4"
                    data-edit-id={post.id}
                  >
                    Edit
                  </button>
                  <button
                    class="text-red-400 hover:text-red-300 transition-colors"
                    data-delete-id={post.id}
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Handle new post
  document.getElementById('new-post')?.addEventListener('click', () => {
    window.location.href = '/admin/blog/new';
  });

  // Handle edit
  document.querySelectorAll('[data-edit-id]').forEach(button => {
    button.addEventListener('click', () => {
      const id = button.getAttribute('data-edit-id');
      window.location.href = `/admin/blog/edit/${id}`;
    });
  });

  // Handle delete
  document.querySelectorAll('[data-delete-id]').forEach(button => {
    button.addEventListener('click', async () => {
      if (!confirm('Are you sure you want to delete this post?')) return;

      const id = button.getAttribute('data-delete-id');
      try {
        const response = await fetch(`/api/blog/${id}`, {
          method: 'DELETE'
        });

        if (response.ok) {
          window.location.reload();
        }
      } catch (error) {
        console.error('Error deleting post:', error);
      }
    });
  });
</script>
