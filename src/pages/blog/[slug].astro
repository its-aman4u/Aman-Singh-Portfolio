---
import Layout from '../../layouts/Layout.astro';
import { getBlogPost, getComments, getPostStats } from '../../lib/blog';
import { format } from 'date-fns';
import { Heart, ChatCircle } from '@phosphor-icons/react/dist/ssr';

const { slug } = Astro.params;
const post = await getBlogPost(slug);
const comments = await getComments(post.id);
const stats = await getPostStats(post.id);
---

<Layout title={`${post.title} | Your Portfolio`}>
  <div class="min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 py-20">
    <article class="container mx-auto px-4 max-w-4xl">
      {post.cover_image && (
        <img 
          src={post.cover_image} 
          alt={post.title}
          class="w-full h-[400px] object-cover rounded-xl mb-8"
        />
      )}

      <h1 class="text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-purple-400 to-pink-600 text-transparent bg-clip-text">
        {post.title}
      </h1>

      <div class="flex items-center gap-4 mb-8 text-gray-400">
        <div class="flex items-center gap-2">
          {post.author?.avatar_url && (
            <img 
              src={post.author.avatar_url} 
              alt={post.author.name}
              class="w-8 h-8 rounded-full"
            />
          )}
          <span>{post.author?.name}</span>
        </div>
        <time datetime={post.published_at}>
          {format(new Date(post.published_at), 'MMMM d, yyyy')}
        </time>
        <div class="flex items-center gap-4 ml-auto">
          <button class="flex items-center gap-1 hover:text-purple-400 transition-colors" data-like-button>
            <Heart size={24} weight={stats.likes_count > 0 ? 'fill' : 'regular'} />
            <span>{stats.likes_count}</span>
          </button>
          <div class="flex items-center gap-1">
            <ChatCircle size={24} />
            <span>{stats.comments_count}</span>
          </div>
        </div>
      </div>

      <div class="prose prose-invert max-w-none mb-16">
        {post.content}
      </div>

      <div class="border-t border-slate-700/50 pt-8">
        <h2 class="text-2xl font-semibold mb-8">Comments</h2>
        
        <div class="space-y-8" id="comments-container">
          {comments.map(comment => (
            <div class="bg-slate-800/50 rounded-xl p-6">
              <div class="flex items-center gap-3 mb-4">
                {comment.user?.avatar_url && (
                  <img 
                    src={comment.user.avatar_url} 
                    alt={comment.user.name}
                    class="w-8 h-8 rounded-full"
                  />
                )}
                <div>
                  <div class="font-medium">{comment.user?.name}</div>
                  <time class="text-sm text-gray-400">
                    {format(new Date(comment.created_at), 'MMM d, yyyy')}
                  </time>
                </div>
              </div>
              <p class="text-gray-300">{comment.content}</p>
              
              {comment.replies?.length > 0 && (
                <div class="mt-6 ml-8 space-y-6">
                  {comment.replies.map(reply => (
                    <div class="bg-slate-800/30 rounded-xl p-6">
                      <div class="flex items-center gap-3 mb-4">
                        {reply.user?.avatar_url && (
                          <img 
                            src={reply.user.avatar_url} 
                            alt={reply.user.name}
                            class="w-8 h-8 rounded-full"
                          />
                        )}
                        <div>
                          <div class="font-medium">{reply.user?.name}</div>
                          <time class="text-sm text-gray-400">
                            {format(new Date(reply.created_at), 'MMM d, yyyy')}
                          </time>
                        </div>
                      </div>
                      <p class="text-gray-300">{reply.content}</p>
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>

        <form id="comment-form" class="mt-8">
          <textarea
            id="comment-content"
            rows="4"
            class="w-full bg-slate-800/30 border border-slate-700/50 rounded-xl p-4 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500"
            placeholder="Share your thoughts..."
          ></textarea>
          <button
            type="submit"
            class="mt-4 px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
          >
            Post Comment
          </button>
        </form>
      </div>
    </article>
  </div>
</Layout>

<script define:vars={{ postId: post.id }}>
  // Handle likes
  const likeButton = document.querySelector('[data-like-button]');
  likeButton?.addEventListener('click', async () => {
    try {
      const response = await fetch('/api/blog/like', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ postId })
      });
      
      if (response.ok) {
        const { liked, count } = await response.json();
        const icon = likeButton.querySelector('svg');
        const counter = likeButton.querySelector('span');
        
        icon.setAttribute('weight', liked ? 'fill' : 'regular');
        counter.textContent = count;
      }
    } catch (error) {
      console.error('Error toggling like:', error);
    }
  });

  // Handle comments
  const commentForm = document.getElementById('comment-form');
  const commentsContainer = document.getElementById('comments-container');

  commentForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const content = document.getElementById('comment-content').value;
    
    try {
      const response = await fetch('/api/blog/comment', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ postId, content })
      });
      
      if (response.ok) {
        const comment = await response.json();
        // Refresh comments section
        location.reload();
      }
    } catch (error) {
      console.error('Error posting comment:', error);
    }
  });
</script>
